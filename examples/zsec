#!/usr/bin/env bash

set -eo pipefail

### SET COLOR CODES ###
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
CYAN=$(tput setaf 6)
RESET=$(tput sgr0)

usage()
{
    echo "Usage: $0 <${GREEN}up${RESET}|${RED}destroy${RESET}>"
    exit 1
}

if [ $# -ne 1 ] ; then
    usage
else
    case $1 in
      up|destroy|do)
          oper=$1
      ;;
      *)
          usage
      ;;
    esac
fi


if [[ "$oper" == "up" ]]; then
    PS3="${CYAN}Select desired deployment: ${RESET}"
    deployments=("greenfield - Recommended for isolated test/POV deployments. Creates new network infrastructure, test workloads, and a public jump host" "brownfield - Recommended for prod deployments. Bring-your-own existing network infrastructure customizations + no workload/bastion creation")
    select deployment in "${deployments[@]}"
    do
        case $REPLY in
            1)
            echo "Greenfield deployment selected..."
            echo "${YELLOW}**Caution** These deployments include test workloads and publicly accessible jump hosts and are intended primarily for lab/test environments${RESET}"
            echo ""
            deployment=greenfield
            break
            ;;
            2)
            echo "Brownfield deployment selected..."
            deployment=brownfield
            break
            ;;
            *) 
            echo "${RED}invalid response${RESET}"
        esac
    done
fi

if [[ "$deployment" == "greenfield" ]]; then
    PS3="${CYAN}Select desired deployment type: ${RESET}"
    dtypes=("Deploy 1 Cloud Connector in a new Resource Group and VNet" "Deploy 1 Cloud Connector in a new Resource Group and VNet w/ Private DNS for ZPA" "Deploy multiple Cloud Connectors w/ Load Balancer in a new Resource Group and VNet" "Deploy multiple Cloud Connectors w/ Load Balancer in a new Resource Group and VNet w/ Private DNS for ZPA" "Deploy a new Resource Group and VNet only - No Cloud Connector" )
    select greenfield_type in "${dtypes[@]}"
    do
        case $REPLY in
            1)
            echo "Deployment type base_1cc selected..."
            dtype=base_1cc
            break
            ;;
            2)
            echo "Deployment type base_1cc_zpa selected..."
            dtype=base_1cc_zpa
            break
            ;;
            3)
            echo "Deployment type base_cc_lb selected..."
            dtype=base_cc_lb
            break
            ;;
            4)
            echo "Deployment type base_cc_lb_zpa selected..."
            dtype=base_cc_lb_zpa
            break
            ;;
            5)
            echo "Deployment type base selected..."
            dtype=base
            break
            ;;
            *) 
            echo "${RED}invalid response${RESET}"
        esac
    done
elif [[ "$deployment" == "brownfield" ]]; then
    PS3="${CYAN}Select desired deployment type: ${RESET}"
    dtypes=("Deploy multiple Cloud Connectors w/ Load Balancer in a new or existing Resource Group and VNet" )
    select greenfield_type in "${dtypes[@]}"
    do
        case $REPLY in
            1)
            echo "Deployment type cc_lb selected..."
            dtype=cc_lb
            break
            ;;
            *) 
            echo "${RED}invalid response${RESET}"
        esac
    done
else
    dtype=$dtype
fi

echo "Discovering processor architecture..."
archdetect=$(uname -m)

tversion=1.1.9
echo "Detecting OS..."
if [[ "$OSTYPE" == "linux"* ]]; then
    os_str=linux
    arch=amd64
    ostype=Linux
elif [[ "$OSTYPE" == "darwin"* && $archdetect == "arm64" ]]; then
    os_str=darwin
    arch=arm64
    ostype=MacOS_arm64
elif [[ "$OSTYPE" == "darwin"* ]]; then
    os_str=darwin
    arch=amd64
    ostype=MacOS
elif [[ "$OSTYPE" == "freebsd"* ]]; then
    os_str=freebsd
    arch=amd64
    ostype=FreeBSD
    echo "FreeBSD support coming soon..."
    exit 1
else
    echo "${RED}Unsupported OS: $OSTYPE${RESET}"
    exit 1
fi
echo "${GREEN}OS is $ostype${RESET}"

dir=bin
echo "Creating a local $dir directory if not present..."
if [[ ! -e $dir ]]; then
    mkdir $dir
elif [[ ! -d $dir ]]; then
    echo "${RED}$dir already exists but is not a directory${RESET}" 1>&2
    exit 1
fi

echo "Checking Azure Environment Variables and Cloud Connector bootstrap requirements... For ZPA or custom/byo deployments, please stop and refer to the README and terraform.tfvars file instructions"
if [[ "$oper" == "up" && ! -e ./.zsecrc ]]; then
first_run="yes"

    # Azure Region selection
    PS3="${CYAN}Select desired Azure region: ${RESET}"
    region_list=(
	"australiacentral"
	"australiacentral2"
	"australiaeast"
	"australiasoutheast"
	"brazilsouth"
	"brazilsoutheast"
	"canadacentral"
	"canadaeast"
	"centralindia"
	"centralus"
	"centraluseuap"
	"chinaeast"
	"chinaeast2"
	"chinanorth"
	"chinanorth2"
	"chinanorth3"
	"eastasia"
	"eastus"
	"eastus2"
	"eastus2euap"
	"francecentral"
	"francesouth"
	"germanynorth"
	"germanywestcentral"
	"japaneast"
	"japanwest"
	"koreacentral"
	"koreasouth"
	"northcentralus"
	"northeurope"
	"norwayeast"
	"norwaywest"
	"southafricanorth"
	"southafricawest"
	"southcentralus"
	"southeastasia"
	"southindia"
	"swedencentral"
	"swedensouth"
	"switzerlandnorth"
	"switzerlandwest"
	"uaecentral"
	"uaenorth"
	"uksouth"
	"ukwest"
	"usdodcentral"
	"usdodeast"
	"usgovarizona"
	"usgovtexas"
	"usgovvirginia"
	"usseceast"
	"ussecwest"
	"ussecwestcentral"
	"westcentralus"
	"westeurope"
	"westindia"
    "westus"
	"westus2"
	"westus3"
        )
        select region_selection in "${region_list[@]}"; do
            for region_choice in "${region_list[@]}"; do
                if [[ $region_choice == $region_selection ]]; then
                    azure_location=$region_selection
                    echo "Azure region ${GREEN}$azure_location${RESET} selected..."
                    echo "export TF_VAR_arm_location='$azure_location'" > .zsecrc
		    if [[ ${azure_location} = "china"*  ]]; then
            		echo "${YELLOW}Azure China region detected. Setting ARM_ENVIRONMENT...${RESET}"
            		echo "export ARM_ENVIRONMENT=china" >> .zsecrc
            		echo "export ARM_SKIP_PROVIDER_REGISTRATION=true" >> .zsecrc
            		read -r -p "${CYAN}Enter full Source Image ID path for your CC image (e.g. /subscriptions/<id>/resourceGroups/<rg>/providers/Microsoft.Compute/images/<image_name>): ${RESET}" ccvm_source_image_id
            		echo "export TF_VAR_ccvm_source_image_id='$ccvm_source_image_id'" >> .zsecrc
        	   elif [[ ${azure_location} = "usgov"* || ${azure_location} = "ussec"* || ${azure_location} = "usdod"* ]]; then
            		echo "${YELLOW} US Gov region detected. Setting ARM_ENVIRONMENT...${RESET}"
           	        echo "export ARM_ENVIRONMENT=usgovernment" >> .zsecrc
            		echo "export ARM_SKIP_PROVIDER_REGISTRATION=true" >> .zsecrc
            		read -r -p "${CYAN}Enter full Source Image ID path for your CC image (e.g. /subscriptions/<id>/resourceGroups/<rg>/providers/Microsoft.Compute/images/<image_name>): ${RESET}" ccvm_source_image_id
            		echo "export TF_VAR_ccvm_source_image_id='$ccvm_source_image_id'" >> .zsecrc
        	   fi
                   break 2
                fi
            done
        done

    echo "Checking Azure Environment Variables..."
    read -r -p "${CYAN}Enter Azure Subcription ID: ${RESET}" azure_subscription_id
    echo "export ARM_SUBSCRIPTION_ID=${azure_subscription_id}" >> .zsecrc
    echo "export TF_VAR_env_subscription_id=${azure_subscription_id}" >> .zsecrc
    read -r -p "${CYAN}Enter Directory (tenant) ID: ${RESET}" azure_tenant_id
    echo "export ARM_TENANT_ID=${azure_tenant_id}" >> .zsecrc
    read -r -p "${CYAN}Enter Application (client) ID of Service Principal: ${RESET}" azure_client_id
    echo "export ARM_CLIENT_ID=${azure_client_id}" >> .zsecrc
    read -r -p "${CYAN}Enter Client Secret Value of Service Principal: ${RESET}" azure_client_secret
    echo "export ARM_CLIENT_SECRET='${azure_client_secret}'" >> .zsecrc

    if [[ "$dtype" != "base" ]]; then
        PS3="${CYAN}Select your Zscaler Cloud: ${RESET}"
        zs_clouds=("zscloud.net" "zscaler.net" "zscalertwo.net" "zscalerthree.net" "zscalerten.net" "zscalerbeta.net" "other")
        select zscaler_cloud in "${zs_clouds[@]}"
        do
            case $REPLY in
                1)
                    echo "Zscaler Cloud ${GREEN}$zscaler_cloud${RESET} selected"
                    zscaler_cloud=$zscaler_cloud
                break
                ;;
                2)
                    echo "Zscaler Cloud ${GREEN}$zscaler_cloud${RESET} selected"
                    zscaler_cloud=$zscaler_cloud
                break
                ;;
                3)
                    echo "Zscaler Cloud ${GREEN}$zscaler_cloud${RESET} selected"
                    zscaler_cloud=$zscaler_cloud
                break
                ;;
                4)
                    echo "Zscaler Cloud ${GREEN}$zscaler_cloud${RESET} selected"
                    zscaler_cloud=$zscaler_cloud
                break
                ;;
                5)
                    echo "Zscaler Cloud ${GREEN}$zscaler_cloud${RESET} selected"
                    zscaler_cloud=$zscaler_cloud
                break
                ;;
                6)
                    echo "Zscaler Cloud ${GREEN}$zscaler_cloud${RESET} selected"
                    zscaler_cloud=$zscaler_cloud
                break
                ;;
                7)
                    echo "Zscaler Cloud ${YELLOW}$zscaler_cloud${RESET} selected"
                    while true; do
                        read -r -p "${CYAN}Enter your desired Zscaler Cloud name (e.g. zscalerbeta.net): ${RESET}" manual_cloud_name_response
                        case $manual_cloud_name_response in
                        zspreview|zscalerpreview|preview|zspreview.net|zscalerpreview.net|preview.net )
                            echo "Setting zspreview.net"
                            zscaler_cloud=zspreview.net
                            zs_env=development
                        break
                        ;;
                        zsdevel|zscalerdevel|devel|zsdevel.net|zscalerdevel.net|devel.net )
                            echo "Setting zsdevel.net"
                            zscaler_cloud=zsdevel.net
                            zs_env=development
                        break
                        ;;
                        zsqa|zscalerqa|qa|zsqa.net|zscalerqa.net|qa.net )
                            echo "Setting zsqa.net"
                            zscaler_cloud=zsqa.net
                            zs_env=development
                        break
                        ;;
                        *) 
                            echo "${RED}Invalid response. Please enter a valid Zscaler Cloud name${RESET}"
                        esac
                    done
                break
                ;;
                *) 
                    echo "${RED}Invalid response. Please enter a number selection${RESET}"
            esac
        done
        echo "export zscaler_cloud='$zscaler_cloud'" >> .zsecrc
    fi

    if [[ "$deployment" == "greenfield" ]]; then    
        while true; do
            clientpublicip=$(curl -s ifconfig.me)
            echo "greenfield deployments include a publicly accessible ssh bastion host.."
            read -r -p "${CYAN}Your current public IP is ${clientpublicip}. Restrict SSH access to only this IP address? [yes/no]: ${RESET}" bastion_response
            case $bastion_response in 
            yes|y ) 
                echo "Updating Bastion NSG to permit SSH only from ${clientpublicip}: "
                echo "export TF_VAR_bastion_nsg_source_prefix=${clientpublicip}" >> .zsecrc
                useclientip=true
            break
            ;;
            no|n )
                useclientip=false
            break
            ;;
            * ) echo "${RED}Invalid response. Please enter yes or no${RESET}";;
            esac
        done

        if [[ "$useclientip" == "false" ]]; then
            while true; do
                read -r -p "${CYAN}Lock SSH access to a different IP address or range? Default is open [yes/no]: ${RESET}" changebastionip
                case $changebastionip in 
	            yes|y ) 
                    read -r -p "${CYAN}Enter new IP Address or CIDR range (e.g. 2.2.2.2/32): ${RESET}" bastionipinput
                    echo "export TF_VAR_bastion_nsg_source_prefix=${bastionipinput}" >> .zsecrc

                    if [[ $bastionipinput =~ ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(3[0-2]|[1-2][0-9]|[1-9]))$ ]]
                    then
                        echo "$bastionipinput - IP/Netmask valid"
                    else
                        echo "${RED}$bastionipinput is not valid IP CIDR format${RESET}"
                        echo "${YELLOW}Delete .zsecrc file and re-run zsec up...${RESET}"
                        exit 1
                    fi
                break
                ;;
	            no|n )
                    echo "${YELLOW}**Caution** SSH access permitted for all IP addresses...${RESET}" 
                break
                ;;
	            * ) echo "${RED}invalid response. Please enter yes or no${RESET}";;
                esac
            done
        fi
    fi

    # if .zsecrc is not present we'll assume that Azure env was never set
    if [[ "$dtype" != "base" ]]; then
        # ---
        # Host Encryption Support
        encryption_at_host_enabled=true
        # Sourcing .zsecrc to use credentials during execution
        source .zsecrc
        if grep -q "export ARM_ENVIRONMENT=china" .zsecrc; then
        TOKEN_ENDPOINT="https://login.partner.microsoftonline.cn/${ARM_TENANT_ID}/oauth2/token"
        RESOURCE="https://management.chinacloudapi.cn"
        elif grep -q "export ARM_ENVIRONMENT=usgovernment" .zsecrc; then
        TOKEN_ENDPOINT="https://login.microsoftonline.us/${ARM_TENANT_ID}/oauth2/token"
        RESOURCE="https://management.usgovcloudapi.net"
        else
        TOKEN_ENDPOINT="https://login.microsoftonline.com/${ARM_TENANT_ID}/oauth2/token"
        RESOURCE="https://management.azure.com/"
        fi

        while true; do
            read -r -p "${CYAN}Do you want to enable the Azure host encryption feature? [Default setting is Yes]: ${RESET}" input

            # Convert the user input to lowercase for case-insensitive comparison
            input=$(echo "$input" | tr '[:upper:]' '[:lower:]')

            if [[ "$input" == "no" || "$input" == "n" ]]; then
                echo "${YELLOW}**Caution** Setting encryption_at_host_enabled to false...${RESET}"
                encryption_at_host_enabled=false
                break
            elif [[ "$input" == "yes" || "$input" == "y" || -z "$input" ]]; then            
                echo "Checking if EncryptionAtHost feature is enabled for subscription $ARM_SUBSCRIPTION_ID..."
                ACCESS_TOKEN=$(curl -s -X POST -H "Content-Type: application/x-www-form-urlencoded" \
                    -d "grant_type=client_credentials" \
                    -d "client_id=${ARM_CLIENT_ID}" \
                    -d "client_secret=${ARM_CLIENT_SECRET}" \
                    -d "resource=${RESOURCE}" \
                    "${TOKEN_ENDPOINT}" | grep -o '"access_token":"[^"]*' | awk -F'"' '{print $4}')
                    
                response=$(curl -s -X GET -H "Authorization: Bearer ${ACCESS_TOKEN}" \
                    "$RESOURCE/subscriptions/$ARM_SUBSCRIPTION_ID/providers/Microsoft.Features/providers/Microsoft.Compute/features/EncryptionAtHost?api-version=2021-07-01" \
                    |grep -o '"state":"[^"]*' | awk -F'"' '{print $4}')

                if [ "$response" = "Registered" ]; then
                    echo "Setting encryption_at_host_enabled to true..."
                    encryption_at_host_enabled=true
                else
                    echo "${RED}Error: Azure Subscription $ARM_SUBSCRIPTION_ID is not registered to support host encryption. Please refer to documentation.${RESET}"
                    exit 1    
                fi
                break
            else
                echo "${RED}Invalid input. Please enter 'yes' or 'no'.${RESET}"
            fi
        done

        echo "export TF_VAR_encryption_at_host_enabled=${encryption_at_host_enabled}" >> .zsecrc
        # End of Host Encryption support update
        # ---


        cc_instance_size=small
        echo "export TF_VAR_cc_instance_size=${cc_instance_size}" >> .zsecrc

        if [[ $cc_instance_size == "small" ]]; then
             PS3="${CYAN}Select desired Azure VM type for Cloud Connector: ${RESET}"
            if [[ "$azure_location" == "chinanorth" || "$azure_location" == "chinaeast" ]]; then
                vm_sizes=("Standard_DS2_v2")
                select ccvm_instance_type in "${vm_sizes[@]}"
                do
                    case $REPLY in
                        1)
                            echo "Cloud Connector VM type $ccvm_instance_type selected"
                            echo "export TF_VAR_ccvm_instance_type='$ccvm_instance_type'" >> .zsecrc
                            break
                            ;;
                        *) 
                            echo "${RED}Invalid response. Please enter a number selection${RESET}"
                    esac
                done
            elif [[ "$azure_location" == "china"* ]]; then
                vm_sizes=("Standard_DS3_v2" "Standard_DS2_v2")
                select ccvm_instance_type in "${vm_sizes[@]}"
                do
                    case $REPLY in
                        1)
                            echo "Cloud Connector VM type $ccvm_instance_type selected"
                            echo "export TF_VAR_ccvm_instance_type='$ccvm_instance_type'" >> .zsecrc
                            break
                            ;;
                        2)
                            echo "Cloud Connector VM type $ccvm_instance_type selected"
                            echo "export TF_VAR_ccvm_instance_type='$ccvm_instance_type'" >> .zsecrc
                            break
                            ;;
                        *) 
                            echo "${RED}Invalid response. Please enter a number selection${RESET}"
                    esac
                done
            else
                vm_sizes=("Standard_D2ds_v5" "Standard_D2ds_v4" "Standard_D2s_v3" "Standard_DS2_v2" "Standard_DS3_v2")
                select ccvm_instance_type in "${vm_sizes[@]}"
                do
                    case $REPLY in
                        1)
                            echo "Cloud Connector VM type $ccvm_instance_type selected"
                            echo "export TF_VAR_ccvm_instance_type='$ccvm_instance_type'" >> .zsecrc
                            break
                            ;;
                        2)
                            echo "Cloud Connector VM type $ccvm_instance_type selected"
                            echo "export TF_VAR_ccvm_instance_type='$ccvm_instance_type'" >> .zsecrc
                            break
                            ;;
                        3)
                            echo "Cloud Connector VM type $ccvm_instance_type selected"
                            echo "export TF_VAR_ccvm_instance_type='$ccvm_instance_type'" >> .zsecrc
                            break
                            ;;
                        4)
                            echo "Cloud Connector VM type $ccvm_instance_type selected"
                            echo "export TF_VAR_ccvm_instance_type='$ccvm_instance_type'" >> .zsecrc
                            break
                            ;;
                        5)
                            echo "Cloud Connector VM type $ccvm_instance_type selected"
                            echo "export TF_VAR_ccvm_instance_type='$ccvm_instance_type'" >> .zsecrc
                            break
                            ;;
                        *) 
                            echo "${RED}Invalid response. Please enter a number selection${RESET}"
                    esac
                done
            fi
        fi

        read -r -p "${CYAN}Enter CC Provisioning URL${RESET} (E.g. connector.zscaler.net/api/v1/provUrl?name=azure_prov_url): " cc_vm_prov_url
        echo "Provisioning URL entered is: $cc_vm_prov_url. ${YELLOW}Make sure this matches the CC Instance Size $cc_instance_size chosen${RESET}"
        echo "export TF_VAR_cc_vm_prov_url=${cc_vm_prov_url}" >> .zsecrc
        read -r -p "${CYAN}Enter Azure Key Vault URL${RESET} (E.g https://zscaler-cc-demo.vault.azure.net): " azure_vault_url
        echo "Key Vault URL entered is: $azure_vault_url"
        echo "export TF_VAR_azure_vault_url=${azure_vault_url}" >> .zsecrc
        http_probe_port_default=50000
        read -r -p "${CYAN}Enter CC service health probe TCP port number. Valid input = 80 or any number between 1024-65535 [Default=$http_probe_port_default]: ${RESET}" http_probe_port_input
        http_probe_port=${http_probe_port_input:-$http_probe_port_default}
            if ((http_probe_port == 80 || http_probe_port >= 1024 && http_probe_port <= 65535)); then
                echo "${GREEN}Valid HTTP probe port input of $http_probe_port${RESET}"
                echo "export TF_VAR_http_probe_port=${http_probe_port}" >> .zsecrc
            else
                echo "${RED}Invalid HTTP probe port value${RESET}"
                echo "${YELLOW}Delete .zsecrc file and re-run zsec up...${RESET}"
                exit 1
            fi
        echo "Cloud Connector User Managed Identity Information:"

        while true; do
            read -r -p "${CYAN}Is the Managed Identity in the same Subscription ID? [yes/no]: ${RESET}" response
            case $response in 
            yes|y ) 
                echo "Managed Identity is in the same Subscription"
            break
            ;;
            no|n )
                read -r -p "${CYAN}Enter Subscription ID of Managed Identity: ${RESET}" managed_identity_subscription_id
                echo "export TF_VAR_managed_identity_subscription_id=${managed_identity_subscription_id}" >> .zsecrc
            break
            ;;
            * ) echo "${RED}invalid response. Please enter yes or no${RESET}";;
            esac
        done  
        
        read -r -p "${CYAN}Enter Managed Identity Name: ${RESET}" cc_vm_managed_identity_name 
        echo "export TF_VAR_cc_vm_managed_identity_name=${cc_vm_managed_identity_name}" >> .zsecrc
        read -r -p "${CYAN}Enter Managed Identity Resource Group: ${RESET}" cc_vm_managed_identity_rg
        echo "export TF_VAR_cc_vm_managed_identity_rg=${cc_vm_managed_identity_rg}" >> .zsecrc
    
        cc_count_default=2
        if [[ "$dtype" == *"lb"* ]]; then
            read -r -p "${CYAN}Enter how many Cloud Connectors to deploy? [Default=$cc_count_default]: ${RESET}" cc_count_input
            cc_count=${cc_count_input:-$cc_count_default}
            if ((cc_count >= 1 && cc_count <= 20)); then
                echo "${dtype} will deploy ${cc_count} Cloud Connector in ${azure_location}"
                echo "export TF_VAR_cc_count=${cc_count}" >> .zsecrc
            else
                echo "${RED}invalid cc_count value. Must be a number between 1 and 20${RESET}"
                echo "${YELLOW}Delete .zsecrc file and re-run zsec up...${RESET}"
                exit 1
            fi
        elif [[ "$dtype" == "base_1cc" ]]; then
            echo "${dtype} will deploy one Cloud Connector in ${azure_location}"   
        fi

        az_supported_regions=["australiaeast","Australia East","brazilsouth","Brazil South","canadacentral","Canada Central","centralindia","Central India","centralus","Central US","chinanorth3","China North 3","ChinaNorth3","eastasia","East Asia","eastus","East US","eastus2","East US 2","francecentral","France Central","germanywestcentral","Germany West Central","japaneast","Japan East","koreacentral","Korea Central","northeurope","North Europe","norwayeast","Norway East","southafricanorth","South Africa North","southcentralus","South Central US","southeastasia","Southeast Asia","swedencentral","Sweden Central","switzerlandnorth","Switzerland North","uaenorth","UAE North","uksouth","UK South","westeurope","West Europe","westus2","West US 2","westus3","West US 3","usgovvirginia","US Gov Virginia"]
        if [[ ${az_supported_regions[*]} =~ $azure_location ]]; then
        echo "${GREEN}Azure region ${azure_location} supports Zones...${RESET}"
        zones_enabled_default=no
            while true; do
            read -r -p "${CYAN}Deploy Cloud Connectors in dedicated Availability Zones/subnets? (Enter yes or no) [Default=$zones_enabled_default]: ${RESET}" zones_enabled_input
            zones_enabled=${zones_enabled_input:-$zones_enabled_default}
                case $zones_enabled in 
                yes|y )
                    echo "export TF_VAR_zones_enabled=true" >> .zsecrc
                break
                ;;
                no|n )
                echo "export TF_VAR_zones_enabled=false" >> .zsecrc
                echo "${YELLOW}**Caution** No zones defined. Proceeding with availability sets fault tolerance...${RESET}"
                break
                ;;
                * ) echo "${RED}invalid response. Please enter yes or no${RESET}";;
                esac
            done  


            if [[ "$zones_enabled" == "yes" || "$zones_enabled" == "y" ]]; then
                echo "Choose zones [1-3] to deploy in... "
                echo "If deploying only one Cloud Connector, enter yes for only one Zone (1, 2, or 3)"
                while true; do
                    read -r -p "${CYAN}Zone 1 (yes/no): ${RESET}" zone1_response
                    case $zone1_response in 
                    yes|y ) 
                        echo "Availability Zone 1 selected"
                        zone1_use=true
                    break
                    ;;
                    no|n )
                    zone1_use=false
                    break
                    ;;
                    * ) echo "${RED}invalid response. Please enter yes or no${RESET}";;
                    esac
                done 
                
                while true; do
                    read -r -p "${CYAN}Zone 2 (yes/no): ${RESET}" zone2_response
                    case $zone2_response in 
                    yes|y ) 
                        echo "Availability Zone 2 selected"
                        zone2_use=true
                    break
                    ;;
                    no|n )
                        zone2_use=false
                    break
                    ;;
                    * ) echo "${RED}invalid response. Please enter yes or no${RESET}";;
                    esac
                done
    
                while true; do
                    read -r -p "${CYAN}Zone 3 (yes/no): ${RESET}" zone3_response
                    case $zone3_response in 
                    yes|y ) 
                        echo "Availability Zone 3 selected"
                        zone3_use=true
                    break
                    ;;
                    no|n )
                        zone3_use=false
                    break
                    ;;
                    * ) echo "${RED}invalid response. Please enter yes or no${RESET}";;
                    esac
                done 

                if [[ "$zone1_use" == "true" && "$zone2_use" == "false" && "$zone3_use" == "false" ]]; then
                    echo "Zones selected: 1"
                    echo "export TF_VAR_zones='[\"1\"]'" >> .zsecrc
                elif [[ "$zone1_use" == "false" && "$zone2_use" == "true" && "$zone3_use" == "false" ]]; then
                    echo "Zones selected: 2"
                    echo "export TF_VAR_zones='[\"2\"]'" >> .zsecrc
                elif [[ "$zone1_use" == "false" && "$zone2_use" == "false" && "$zone3_use" == "true" ]]; then
                    echo "Zones selected: 3"
                    echo "export TF_VAR_zones='[\"3\"]'" >> .zsecrc
                elif [[ "$zone1_use" == "true" && "$zone2_use" == "true" && "$zone3_use" == "false" ]]; then
                    echo "Zones selected: 1 and 2"
                    echo "export TF_VAR_zones='[\"1\", \"2\"]'" >> .zsecrc
                elif [[ "$zone1_use" == "true" && "$zone2_use" == "true" && "$zone3_use" == "true" ]]; then
                    echo "Zones selected: 1, 2, and 3"
                    echo "export TF_VAR_zones='[\"1\", \"2\", \"3\"]'" >> .zsecrc
                elif [[ "$zone1_use" == "true" && "$zone2_use" == "false" && "$zone3_use" == "true" ]]; then
                    echo "Zones selected: 1 and 3"
                    echo "export TF_VAR_zones='[\"1\", \"3\"]'" >> .zsecrc  
                elif [[ "$zone1_use" == "false" && "$zone2_use" == "true" && "$zone3_use" == "true" ]]; then
                    echo "Zones selected: 2 and 3"
                    echo "export TF_VAR_zones='[\"2\", \"3\"]'" >> .zsecrc   
                else
                    echo "${RED}Invalid Zones selection. exiting...${RESET}"
                    echo "${YELLOW}Delete .zsecrc file and re-run zsec up...${RESET}"
                    exit 1
                fi 
            fi
        else
            echo "${YELLOW}Azure region ${azure_location} does not support Zones. Proceeding...${RESET}"
        fi

        if [[ "$dtype" == "cc"* ]]; then
            while true; do
                read -r -p "${CYAN}Enable Azure Private DNS for ZPA? (yes/no): ${RESET}" zpa_response
                case $zpa_response in 
                yes|y ) 
                    echo "Enabling Azure Private DNS module..."
                    zpa_enabled=true
                    echo "export TF_VAR_zpa_enabled=$zpa_enabled" >> .zsecrc
                break
                ;;
                no|n )
                    echo "No ZPA enablement..."
                    zpa_enabled=false
                    echo "export TF_VAR_zpa_enabled=$zpa_enabled" >> .zsecrc
                break
                ;;
                * ) echo "${RED}invalid response. Please enter yes or no${RESET}";;
                esac
            done 
        fi

        if [[ "$zpa_enabled" == "true" || "$dtype" == *"zpa" ]]; then
        array=()
        domain_names_map="'{ "
        counter=0
            while true; do
                read -r -p "${CYAN}How many Domain/FQDN application segments to add to Private DNS Resolver Rules?: ${RESET}" domain_number
                if [[ $domain_number == 0 ]]; then
                    echo "${RED}Invalid input. Please enter a whole number for the number of domains you will be adding...${RESET}"
                elif [[ $domain_number =~ ^[0-9]+$ ]]; then
                    echo "$domain_number domains to enter..."
                break
                else
                    echo "${RED}Invalid input. Please enter a whole number for the number of domains you will be adding...${RESET}"
                fi
            done
            for i in $(seq $domain_number); do
            read -r -p "${CYAN}Enter a single ZPA Domain/FQDN ending with a trailing dot${RESET} ( e.g. azure.company.com. ): " domain_name
            if [[ $domain_name = *" "* ]]; then
                echo "${RED}Spaces not allowed. Please enter only one domain at a time. Delete .zsecrc file and re-run zsec up...${RESET}"
                exit 1
            elif [[ $domain_name == '' ]]; then
                echo "${RED}Empty entries are not allowed. Delete .zsecrc file and re-run zsec up...${RESET}"
                exit 1
            elif [[ $domain_name == "." ]]; then
                echo "${YELLOW}You entered '.' dot. While Azure does support this to forward all domain requests, this could have unintended consequences/compatibility issues with Azure services${RESET}"
            elif [[ $domain_name == "."* ]]; then
                echo "${RED}Invalid format. Domains cannot start with a dot (.). Delete .zsecrc file and re-run zsec up...${RESET}"
                exit 1
            elif [[ $domain_name == "*"* ]]; then
                echo "${RED}Invalid format. Domains cannot start with a star/wildcard (*). Delete .zsecrc file and re-run zsec up...${RESET}"
                exit 1
            elif [[ $domain_name != *"." ]]; then
                echo "${RED}Invalid format. Domains must end with a dot (.). Delete .zsecrc file and re-run zsec up...${RESET}"
                exit 1
            fi
            array+=("$domain_name")
            counter=$(( $counter + 1 ))
            domain_names_map+="appseg$counter: \"$domain_name\", "
            done
            domain_names_map+="}'"
            echo "export TF_VAR_domain_names=$domain_names_map" >> .zsecrc
        fi

        # ZSSupport Server IP lookup by cloud to populate Security Group rule
        support_access_response_default="no"
        support_server_ip_default="199.168.148.101"
        while true; do
            read -r -p "${CYAN}By default, an outbound Network Security Group rule is configured enabling Zscaler remote support access. Would you like to disable this rule creation? [Default=$support_access_response_default]: ${RESET}" support_access_response_input
            support_access_response=${support_access_response_input:-$support_access_response_default}
            case $support_access_response in 
            yes|y ) 
                echo "${YELLOW}Outbound rule Zscaler_Support_Access will not be created${RESET}"
                echo "${YELLOW}*** Caution: Zscaler Support may not be able to assist as efficiently if troubleshooting is required without this access${RESET}"
                echo "export TF_VAR_support_access_enabled=false" >> .zsecrc
            break
            ;;
            no|n )
                echo "export TF_VAR_support_access_enabled=true" >> .zsecrc
                if [[ "$zs_env" == "development" ]]; then
                    echo "Setting security group rule to ${GREEN}$support_server_ip_default${RESET}"
                    echo "export TF_VAR_zssupport_server='$support_server_ip_default'" >> .zsecrc
                else
                    echo "Resolving remotesupport.$zscaler_cloud to IP for Network Security Group rule..."
                    support_server_ip=$(dig +short remotesupport.$zscaler_cloud)
                    echo "${GREEN}Outbound rule permitting TCP/12002 access to $support_server_ip will be created${RESET}"
                    echo "export TF_VAR_zssupport_server='$support_server_ip'" >> .zsecrc
                fi
            break
            ;;
            * ) echo "${RED}Invalid response. Please enter yes or no${RESET}";;
            esac
        done
    fi
fi

 #add local bin directory to PATH
if ! grep -Fxq "export PATH=\${PATH}:\${PWD}/bin" .zsecrc; then
    echo 'export PATH=${PATH}:${PWD}/bin' >> .zsecrc
fi

# add deployment type to .zsecrc for future runs
if [[ "$oper" == "up" ]]; then
    echo "${GREEN}Updating .zsecrc with dtype of $dtype${RESET}"
    sed -i'' -e '/dtype/d' .zsecrc
    echo "export dtype=${dtype}" >> .zsecrc
fi

# initialize environment variables
. ./.zsecrc

# check for valid environment variables in .zsecrc
if [ -z "$ARM_CLIENT_ID" ] || [ -z "$ARM_CLIENT_SECRET" ] || [ -z "$ARM_SUBSCRIPTION_ID" ] || [ -z "$ARM_TENANT_ID" ] || [ -z "$TF_VAR_arm_location" ]; then
    echo "${RED}Azure Access info is missing. Remove .zsecrc file and rerun $0 $1${RESET}"
    exit 1
fi

if [[ $dtype != "base" ]]; then
    echo "Checking Cloud Connector provisioning info"
  if [ -z "$TF_VAR_cc_vm_prov_url" ] || [ -z "$TF_VAR_azure_vault_url" ] || [ -z "$TF_VAR_http_probe_port" ] || [ -z "$TF_VAR_cc_instance_size" ] || [ -z "$TF_VAR_ccvm_instance_type" ] || [ -z "$TF_VAR_cc_vm_managed_identity_name" ] || [ -z "$TF_VAR_cc_vm_managed_identity_rg" ]; then
    echo "${RED}Cloud Connector provisioning info is missing. Remove .zsecrc file and rerun $0 $1${RESET}"
    exit 1
  fi
fi


echo "Download terraform binary for $ostype if not present..."
if [[ ! -e ./$dir/terraform ]]; then
    curl -o ./$dir/terraform_${tversion}_${arch}.zip https://releases.hashicorp.com/terraform/$tversion/terraform_${tversion}_${os_str}_${arch}.zip
    unzip ./$dir/terraform_${tversion}_${arch}.zip -d ./$dir
    rm -f ./$dir/terraform_${tversion}_${arch}.zip
fi

if [[ "$oper" == "do" ]]; then
    exit 1
fi

if [[ "$oper" == "up" ]]; then
    echo "${GREEN}Bringing up Cloud Connector cluster...${RESET}"
    TF_DATA_DIR=../.terraform ./$dir/terraform -chdir="$dtype" init
    if [[ "$AUTO_APPROVE" ]]; then
        TF_DATA_DIR=../.terraform ./$dir/terraform -chdir="$dtype" apply -auto-approve
    else
        TF_DATA_DIR=../.terraform ./$dir/terraform -chdir="$dtype" apply
    fi

elif [[ "$oper" == "destroy" ]]; then
    echo "${GREEN}Destroying Cloud Connector cluster...${RESET}"
    TF_DATA_DIR=../.terraform ./$dir/terraform -chdir="$dtype" init
    if [[ "$AUTO_APPROVE" ]]; then
        TF_DATA_DIR=../.terraform ./$dir/terraform -chdir="$dtype" destroy -auto-approve
    else
      TF_DATA_DIR=../.terraform ./$dir/terraform -chdir="$dtype" destroy
    fi
    echo "${GREEN}Removing Terraform files and directories...${RESET}"
    rm -rf bin 
    rm -rf **/.terraform/* && rm -rf **/.terraform*
    find . -type f -name '.terraform.lock.hcl' -delete
    rm -rf .terraform* && rm -f terraform.tfstate*
    rm -f *.pem && rm -f *.pem.pub
    rm -f name_prefix random_string
    rm -rf user.key user.crt
    rm -rf systems.json setup-*.tar
    rm -rf **/errorlog.txt
now=$(date +'%Y-%m-%d-%H_%M_%S')
    echo "${GREEN}archiving .zsecrc file to .zsecrc-${now}${RESET}"
    cp .zsecrc .zsecrc-${now}
    rm -rf .zsecrc && rm -rf .zsecrc.bak
fi
